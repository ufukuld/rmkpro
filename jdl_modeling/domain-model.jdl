/*
== One to One relationship is a condition where data in a table only has a relationship to one data in another table.
Ex: One employee only has one account and vice versa.

== A many-to-one relationship is where one entity (typically a column or set of columns) contains values that refer to another
 entity (a column or set of columns) that has unique values.
Ex: a Make has many Models -> Many Models maps to One make

== A one-to-many relationship occurs in database design when one entity has a multivalued relationship with another entity.
Ex: One position can have many employees, but each employee can only work for one position.

== A many-to-many relationship is a relationship that is multivalued in both directions.
Ex: One account can have more than one role, and one role can have more than one account.
*/

// A Legal Entity is a person or company.
entity LegalEntity {
  postCode String required
  streetAddress String required
  email String required
  phone String
  type LegalEntityType
}

// An individual who is a private legal entity or a representative of a company
entity Person {
   title String required
   firstNames String required
   surname String required
}

// A company
entity Company {
    name String required
    department String
}

// Legal Entity Type is private individual or Company
enum LegalEntityType {
  PRIVATE_INDIVIDUAL("Private Individual"),
  CORPORATION("Corporation")
}

enum FuelType {
  PETROL("Petrol"),
  DIESEL("Diesel"),
  PETROL_HYBRID("Petrol Hybrid"),
  ELECTRIC("Electric")
}

enum PaintType {
  SOLID("Solid"),
  METALLIC("Metallic"),
  PEARLESCENT("Pearlescent"),
  MATTE("Matte"),
  SPECIAL("Special/Other")
}

enum VehicleStatus {
   REQ_FOR_COLLECTION("Collection Requested"),
   COLLECTED("Collected"),
   IN_AUCTION("In Auction"),
   SOLD("Sold")
}

entity Colour {
  label String required
  // optional: add HSV code
  paintType PaintType required
}

// The model, e.g. Passat
entity Model {
  label String required
}

// The Make or Brand (ex. Toyota)
entity Make {
  label String required
}

// The trim level e.g. Trendline DSG
entity Trim {
  label String required
  doors Integer required
  seats Integer required
  engineDisplacementCc Integer required
  // todo: the last two items can be moved to an many-to-many attribute-value map
  isAutomatic Boolean
  fuelType FuelType required
}

// Any single item up for sale
entity Vehicle {
  registrationNumber String required
  firstRegistrationDate LocalDate required
  status VehicleStatus
  mileage Integer required
  reservePrice BigDecimal
  proposedSalePrice BigDecimal
  netBookValue BigDecimal
  //TODO: may need analysis whether to put engine power/torque here or to trim
}

entity Costs {
  detail String required
  unitPrice BigDecimal
  vatAmount BigDecimal
  vatPercentage BigDecimal
  netAmount BigDecimal
}

entity VehicleImages {
  contentType String required
  image Blob required
}

relationship ManyToOne {
  Vehicle{trim} to Trim
  Trim{model} to Model
  Vehicle{owner} to LegalEntity
  Vehicle{colour} to Colour
  Model{make} to Make
  Company{contactPerson} to Person
}

relationship OneToMany {
  Vehicle{images} to VehicleImages
  Vehicle{costs} to Costs
}

relationship OneToOne {
    LegalEntity{person} to Person
    LegalEntity{company} to Company
}
